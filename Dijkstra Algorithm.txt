

 
// The program is for adjacency matrix representation of the graph 

  
#include <limits.h> 
#include <stdio.h> 
#include<iostream>
  using namespace std;
// Number of vertices in the graph 


  
// A function to find the vertex with minimum distance value, from 
// the set of vertices not yet included in shortest path tree 
void dijkstra(int *graph,int src,int V);
int minDistance(int dist[], bool sptSet[],int V) 
{ 

    // Initialize min value 

    int min = INT_MAX, min_index; 

  

    for (int v = 0; v < V; v++) 

        if (sptSet[v] == false && dist[v] <= min) 

            min = dist[v], min_index = v; 

  

    return min_index; 
} 

  

void printSolution(int dist[],int V) 
{ 
    cout<<"vertex\t\t"<<"Distance from source"<<endl;
    for (int i = 0; i < V; i++) 
        cout<<i<<"\t"<<"\t"<<dist[i]<<endl;    
} 

  
// Function that implements Dijkstra's single source shortest path algorithm 
// for a graph represented using adjacency matrix representation 

void dijkstra(int *graph, int src,int V) 
{ 

    int dist[V]; // The output array.  dist[i] will hold the shortest 

    // distance from src to i 

  

    bool sptSet[V]; // sptSet[i] will be true if vertex i is included in  shortest distance from src to i is finalized 

  

    // Initialize all distances as INFINITE and stpSet[] as false 

    for (int i = 0; i < V; i++) 

        dist[i] = INT_MAX, sptSet[i] = false; 

  

    

    dist[src] = 0; 

  

    // Find shortest path for all vertices 

    for (int count = 0; count < V - 1; count++) { 

        // Pick the minimum distance vertex from the set of vertices not yet processed  

        int u = minDistance(dist, sptSet,V); 

        // Mark the picked vertex as processed 

        sptSet[u] = true; 

  
        // Update dist value of the adjacent vertices of the picked vertex. 

        for (int v = 0; v < V; v++) 

  

            // Update dist[v] only if is not in sptSet, there is an edge from 

            // u to v, and total weight of path from src to  v through u is 

            // smaller than current value of dist[v] 

            if (!sptSet[v] && *(graph + u*V +v) && dist[u] != INT_MAX 

                && dist[u] + *(graph + u*V +v) < dist[v]) 

                dist[v] = dist[u] + *(graph + u*V +v); 

    } 
    printSolution(dist,V); 
} 


int main() 
{ 
     int n,i,j,src;
     cout<<"Enter the value of number of vertices"<<endl;
     cin>>n;
     cout<<"Enter the vertice number of source node"<<endl;
     cin>>src;
     cout<<"Enter the adjacent matrix"<<endl;
     int graph[n][n];
     for(i=0;i<n;i++)
     {
         for(j=0;j<n;j++)
         cin>>graph[i][j];
     }
    cout<<"Distance of other vertices from "<<src<<" node are:"<<endl;
    dijkstra(&graph[0][0],src,n); 
    return 0; 
} 
